import Question from '../models/question.model.js';
import Test from '../models/test.model.js';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
export const getQuestionsByTestId = async (req, res) => {
  try {
    const test = await Test.findById(req.params.testId);

    if (!test) {
      return res.status(404).json({ message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–µ—Å—Ç–∞
    if (test.creator.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const questions = await Question.find({ test: req.params.testId }).sort({ orderIndex: 1 });
    res.json(questions);
  } catch (error) {
    console.error('Get questions by test ID error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
export const createQuestion = async (req, res) => {
  try {
    const { questionText, questionType, options, correctAnswer, points, explanation, settings } = req.body;
    console.log("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", req.body);
    const testId = req.params.testId;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    const test = await Test.findById(testId);

    if (!test) {
      return res.status(404).json({ message: req.body });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–µ—Å—Ç–∞
    if (test.creator.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const questionCount = await Question.countDocuments({ test: testId });

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const question = await Question.create({
      test: testId,
      questionText,
      questionType,
      options: options || [],
      correctAnswer,
      points: points || 1,
      orderIndex: questionCount,
      explanation,
      settings
    });

    res.status(201).json(question);
  } catch (error) {
    console.error('Create question error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤
export const createMultipleQuestions = async (req, res) => {
  try {
    const questionsData = req.body; // –û–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    const testId = req.params.testId;
    console.log(questionsData)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    const test = await Test.findById(testId);
    if (!test) {
      return res.status(404).json({ message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–µ—Å—Ç–∞
    if (test.creator.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π orderIndex
    const existingCount = await Question.countDocuments({ test: testId });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID —Ç–µ—Å—Ç–∞ –∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const preparedQuestions = questionsData.map((q, index) => ({
      test: testId,
      questionText: q.questionText,
      questionType: q.questionType,
      options: (q.questionType === "textInput" ? [] : q.options) || [], // questionType: "textInput"
      correctAnswer: q.correctAnswer,
      points: q.points || 1,
      orderIndex: existingCount + index, // –£—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
      explanation: q.explanation
    }));

    // –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const insertedQuestions = await Question.insertMany(preparedQuestions);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    res.status(201).json(questionsData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};



// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
export const updateQuestion = async (req, res) => {
  try {
    const { questionText, questionType, options, correctAnswer, points, explanation } = req.body;

    const question = await Question.findById(req.params.id);

    if (!question) {
      return res.status(404).json({ message: '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç
    const test = await Test.findById(question.test);

    if (!test || test.creator.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤–æ–ø—Ä–æ—Å–∞
    question.questionText = questionText || question.questionText;
    question.questionType = questionType || question.questionType;
    question.options = options || question.options;
    question.correctAnswer = correctAnswer !== undefined ? correctAnswer : question.correctAnswer;
    question.points = points || question.points;
    question.explanation = explanation !== undefined ? explanation : question.explanation;

    const updatedQuestion = await question.save();

    res.json(updatedQuestion);
  } catch (error) {
    console.error('Update question error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
export const deleteQuestion = async (req, res) => {
  try {
    const question = await Question.findById(req.params.id);

    if (!question) {
      return res.status(404).json({ message: '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç
    const test = await Test.findById(question.test);

    if (!test || test.creator.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    await question.deleteOne();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ orderIndex –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    await Question.updateMany(
      { test: question.test, orderIndex: { $gt: question.orderIndex } },
      { $inc: { orderIndex: -1 } }
    );

    res.json({ message: '–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Delete question error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
export const reorderQuestions = async (req, res) => {
  try {
    const { testId, questionOrders } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    const test = await Test.findById(testId);

    if (!test) {
      return res.status(404).json({ message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–µ—Å—Ç–∞
    if (test.creator.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    for (const item of questionOrders) {
      await Question.findByIdAndUpdate(item.id, { orderIndex: item.order });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const questions = await Question.find({ test: testId }).sort({ orderIndex: 1 });

    res.json(questions);
  } catch (error) {
    console.error('Reorder questions error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
export const getQuestionsForAttempt = async (req, res) => {
  try {
    const test = await Test.findById(req.params.testId);

    if (!test || !test.isPublished) {
      return res.status(404).json({ message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    let questions = await Question.find({ test: req.params.testId })
      .select('-correctAnswer')
      .sort({ orderIndex: 1 });

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    if (test.randomOrder) {
      questions = questions.sort(() => Math.random() - 0.5);
    }

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const questionsForAttempt = questions.map(q => ({
      _id: q._id,
      questionText: q.questionText,
      questionType: q.questionType,
      options: q.options.map(opt => ({
        text: opt.text,
        _id: opt._id,
        ...(q.questionType === 'matching' && { matchingPair: opt.matchingPair })
      })),
      points: q.points
    }));

    res.json(questionsForAttempt);
  } catch (error) {
    console.error('Get questions for attempt error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};